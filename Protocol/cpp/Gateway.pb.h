// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Gateway.proto

#ifndef PROTOBUF_Gateway_2eproto__INCLUDED
#define PROTOBUF_Gateway_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace GatewayServer {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Gateway_2eproto();
void protobuf_AssignDesc_Gateway_2eproto();
void protobuf_ShutdownFile_Gateway_2eproto();

class ReportAvailable;
class ReportAvailableResponse;
class ForwardingPacket;
class UserDisconnect;

// ===================================================================

class ReportAvailable : public ::google::protobuf::Message {
 public:
  ReportAvailable();
  virtual ~ReportAvailable();
  
  ReportAvailable(const ReportAvailable& from);
  
  inline ReportAvailable& operator=(const ReportAvailable& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportAvailable& default_instance();
  
  void Swap(ReportAvailable* other);
  
  // implements Message ----------------------------------------------
  
  ReportAvailable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportAvailable& from);
  void MergeFrom(const ReportAvailable& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string server_name = 1;
  inline bool has_server_name() const;
  inline void clear_server_name();
  static const int kServerNameFieldNumber = 1;
  inline const ::std::string& server_name() const;
  inline void set_server_name(const ::std::string& value);
  inline void set_server_name(const char* value);
  inline void set_server_name(const char* value, size_t size);
  inline ::std::string* mutable_server_name();
  inline ::std::string* release_server_name();
  
  // repeated string protocol = 2;
  inline int protocol_size() const;
  inline void clear_protocol();
  static const int kProtocolFieldNumber = 2;
  inline const ::std::string& protocol(int index) const;
  inline ::std::string* mutable_protocol(int index);
  inline void set_protocol(int index, const ::std::string& value);
  inline void set_protocol(int index, const char* value);
  inline void set_protocol(int index, const char* value, size_t size);
  inline ::std::string* add_protocol();
  inline void add_protocol(const ::std::string& value);
  inline void add_protocol(const char* value);
  inline void add_protocol(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& protocol() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_protocol();
  
  // @@protoc_insertion_point(class_scope:GatewayServer.ReportAvailable)
 private:
  inline void set_has_server_name();
  inline void clear_has_server_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* server_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> protocol_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Gateway_2eproto();
  friend void protobuf_AssignDesc_Gateway_2eproto();
  friend void protobuf_ShutdownFile_Gateway_2eproto();
  
  void InitAsDefaultInstance();
  static ReportAvailable* default_instance_;
};
// -------------------------------------------------------------------

class ReportAvailableResponse : public ::google::protobuf::Message {
 public:
  ReportAvailableResponse();
  virtual ~ReportAvailableResponse();
  
  ReportAvailableResponse(const ReportAvailableResponse& from);
  
  inline ReportAvailableResponse& operator=(const ReportAvailableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportAvailableResponse& default_instance();
  
  void Swap(ReportAvailableResponse* other);
  
  // implements Message ----------------------------------------------
  
  ReportAvailableResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportAvailableResponse& from);
  void MergeFrom(const ReportAvailableResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:GatewayServer.ReportAvailableResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Gateway_2eproto();
  friend void protobuf_AssignDesc_Gateway_2eproto();
  friend void protobuf_ShutdownFile_Gateway_2eproto();
  
  void InitAsDefaultInstance();
  static ReportAvailableResponse* default_instance_;
};
// -------------------------------------------------------------------

class ForwardingPacket : public ::google::protobuf::Message {
 public:
  ForwardingPacket();
  virtual ~ForwardingPacket();
  
  ForwardingPacket(const ForwardingPacket& from);
  
  inline ForwardingPacket& operator=(const ForwardingPacket& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ForwardingPacket& default_instance();
  
  void Swap(ForwardingPacket* other);
  
  // implements Message ----------------------------------------------
  
  ForwardingPacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ForwardingPacket& from);
  void MergeFrom(const ForwardingPacket& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 conn_id = 1;
  inline bool has_conn_id() const;
  inline void clear_conn_id();
  static const int kConnIdFieldNumber = 1;
  inline ::google::protobuf::uint32 conn_id() const;
  inline void set_conn_id(::google::protobuf::uint32 value);
  
  // required string packet_name = 2;
  inline bool has_packet_name() const;
  inline void clear_packet_name();
  static const int kPacketNameFieldNumber = 2;
  inline const ::std::string& packet_name() const;
  inline void set_packet_name(const ::std::string& value);
  inline void set_packet_name(const char* value);
  inline void set_packet_name(const char* value, size_t size);
  inline ::std::string* mutable_packet_name();
  inline ::std::string* release_packet_name();
  
  // required string packet_body = 3;
  inline bool has_packet_body() const;
  inline void clear_packet_body();
  static const int kPacketBodyFieldNumber = 3;
  inline const ::std::string& packet_body() const;
  inline void set_packet_body(const ::std::string& value);
  inline void set_packet_body(const char* value);
  inline void set_packet_body(const char* value, size_t size);
  inline ::std::string* mutable_packet_body();
  inline ::std::string* release_packet_body();
  
  // @@protoc_insertion_point(class_scope:GatewayServer.ForwardingPacket)
 private:
  inline void set_has_conn_id();
  inline void clear_has_conn_id();
  inline void set_has_packet_name();
  inline void clear_has_packet_name();
  inline void set_has_packet_body();
  inline void clear_has_packet_body();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* packet_name_;
  ::std::string* packet_body_;
  ::google::protobuf::uint32 conn_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Gateway_2eproto();
  friend void protobuf_AssignDesc_Gateway_2eproto();
  friend void protobuf_ShutdownFile_Gateway_2eproto();
  
  void InitAsDefaultInstance();
  static ForwardingPacket* default_instance_;
};
// -------------------------------------------------------------------

class UserDisconnect : public ::google::protobuf::Message {
 public:
  UserDisconnect();
  virtual ~UserDisconnect();
  
  UserDisconnect(const UserDisconnect& from);
  
  inline UserDisconnect& operator=(const UserDisconnect& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserDisconnect& default_instance();
  
  void Swap(UserDisconnect* other);
  
  // implements Message ----------------------------------------------
  
  UserDisconnect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserDisconnect& from);
  void MergeFrom(const UserDisconnect& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:GatewayServer.UserDisconnect)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 user_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Gateway_2eproto();
  friend void protobuf_AssignDesc_Gateway_2eproto();
  friend void protobuf_ShutdownFile_Gateway_2eproto();
  
  void InitAsDefaultInstance();
  static UserDisconnect* default_instance_;
};
// ===================================================================


// ===================================================================

// ReportAvailable

// required string server_name = 1;
inline bool ReportAvailable::has_server_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportAvailable::set_has_server_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportAvailable::clear_has_server_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportAvailable::clear_server_name() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    server_name_->clear();
  }
  clear_has_server_name();
}
inline const ::std::string& ReportAvailable::server_name() const {
  return *server_name_;
}
inline void ReportAvailable::set_server_name(const ::std::string& value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void ReportAvailable::set_server_name(const char* value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void ReportAvailable::set_server_name(const char* value, size_t size) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReportAvailable::mutable_server_name() {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  return server_name_;
}
inline ::std::string* ReportAvailable::release_server_name() {
  clear_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_name_;
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string protocol = 2;
inline int ReportAvailable::protocol_size() const {
  return protocol_.size();
}
inline void ReportAvailable::clear_protocol() {
  protocol_.Clear();
}
inline const ::std::string& ReportAvailable::protocol(int index) const {
  return protocol_.Get(index);
}
inline ::std::string* ReportAvailable::mutable_protocol(int index) {
  return protocol_.Mutable(index);
}
inline void ReportAvailable::set_protocol(int index, const ::std::string& value) {
  protocol_.Mutable(index)->assign(value);
}
inline void ReportAvailable::set_protocol(int index, const char* value) {
  protocol_.Mutable(index)->assign(value);
}
inline void ReportAvailable::set_protocol(int index, const char* value, size_t size) {
  protocol_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReportAvailable::add_protocol() {
  return protocol_.Add();
}
inline void ReportAvailable::add_protocol(const ::std::string& value) {
  protocol_.Add()->assign(value);
}
inline void ReportAvailable::add_protocol(const char* value) {
  protocol_.Add()->assign(value);
}
inline void ReportAvailable::add_protocol(const char* value, size_t size) {
  protocol_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReportAvailable::protocol() const {
  return protocol_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReportAvailable::mutable_protocol() {
  return &protocol_;
}

// -------------------------------------------------------------------

// ReportAvailableResponse

// required uint32 result = 1;
inline bool ReportAvailableResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportAvailableResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportAvailableResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportAvailableResponse::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 ReportAvailableResponse::result() const {
  return result_;
}
inline void ReportAvailableResponse::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// ForwardingPacket

// required uint32 conn_id = 1;
inline bool ForwardingPacket::has_conn_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ForwardingPacket::set_has_conn_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ForwardingPacket::clear_has_conn_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ForwardingPacket::clear_conn_id() {
  conn_id_ = 0u;
  clear_has_conn_id();
}
inline ::google::protobuf::uint32 ForwardingPacket::conn_id() const {
  return conn_id_;
}
inline void ForwardingPacket::set_conn_id(::google::protobuf::uint32 value) {
  set_has_conn_id();
  conn_id_ = value;
}

// required string packet_name = 2;
inline bool ForwardingPacket::has_packet_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ForwardingPacket::set_has_packet_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ForwardingPacket::clear_has_packet_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ForwardingPacket::clear_packet_name() {
  if (packet_name_ != &::google::protobuf::internal::kEmptyString) {
    packet_name_->clear();
  }
  clear_has_packet_name();
}
inline const ::std::string& ForwardingPacket::packet_name() const {
  return *packet_name_;
}
inline void ForwardingPacket::set_packet_name(const ::std::string& value) {
  set_has_packet_name();
  if (packet_name_ == &::google::protobuf::internal::kEmptyString) {
    packet_name_ = new ::std::string;
  }
  packet_name_->assign(value);
}
inline void ForwardingPacket::set_packet_name(const char* value) {
  set_has_packet_name();
  if (packet_name_ == &::google::protobuf::internal::kEmptyString) {
    packet_name_ = new ::std::string;
  }
  packet_name_->assign(value);
}
inline void ForwardingPacket::set_packet_name(const char* value, size_t size) {
  set_has_packet_name();
  if (packet_name_ == &::google::protobuf::internal::kEmptyString) {
    packet_name_ = new ::std::string;
  }
  packet_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ForwardingPacket::mutable_packet_name() {
  set_has_packet_name();
  if (packet_name_ == &::google::protobuf::internal::kEmptyString) {
    packet_name_ = new ::std::string;
  }
  return packet_name_;
}
inline ::std::string* ForwardingPacket::release_packet_name() {
  clear_has_packet_name();
  if (packet_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = packet_name_;
    packet_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string packet_body = 3;
inline bool ForwardingPacket::has_packet_body() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ForwardingPacket::set_has_packet_body() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ForwardingPacket::clear_has_packet_body() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ForwardingPacket::clear_packet_body() {
  if (packet_body_ != &::google::protobuf::internal::kEmptyString) {
    packet_body_->clear();
  }
  clear_has_packet_body();
}
inline const ::std::string& ForwardingPacket::packet_body() const {
  return *packet_body_;
}
inline void ForwardingPacket::set_packet_body(const ::std::string& value) {
  set_has_packet_body();
  if (packet_body_ == &::google::protobuf::internal::kEmptyString) {
    packet_body_ = new ::std::string;
  }
  packet_body_->assign(value);
}
inline void ForwardingPacket::set_packet_body(const char* value) {
  set_has_packet_body();
  if (packet_body_ == &::google::protobuf::internal::kEmptyString) {
    packet_body_ = new ::std::string;
  }
  packet_body_->assign(value);
}
inline void ForwardingPacket::set_packet_body(const char* value, size_t size) {
  set_has_packet_body();
  if (packet_body_ == &::google::protobuf::internal::kEmptyString) {
    packet_body_ = new ::std::string;
  }
  packet_body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ForwardingPacket::mutable_packet_body() {
  set_has_packet_body();
  if (packet_body_ == &::google::protobuf::internal::kEmptyString) {
    packet_body_ = new ::std::string;
  }
  return packet_body_;
}
inline ::std::string* ForwardingPacket::release_packet_body() {
  clear_has_packet_body();
  if (packet_body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = packet_body_;
    packet_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// UserDisconnect

// required uint32 user_id = 1;
inline bool UserDisconnect::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserDisconnect::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserDisconnect::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserDisconnect::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 UserDisconnect::user_id() const {
  return user_id_;
}
inline void UserDisconnect::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GatewayServer

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Gateway_2eproto__INCLUDED
