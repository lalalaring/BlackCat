// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Gateway.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace GatewayServer {

namespace {

const ::google::protobuf::Descriptor* ReportAvailable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportAvailable_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportAvailableResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportAvailableResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForwardingPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardingPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserDisconnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserDisconnect_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Gateway_2eproto() {
  protobuf_AddDesc_Gateway_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Gateway.proto");
  GOOGLE_CHECK(file != NULL);
  ReportAvailable_descriptor_ = file->message_type(0);
  static const int ReportAvailable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAvailable, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAvailable, protocol_),
  };
  ReportAvailable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportAvailable_descriptor_,
      ReportAvailable::default_instance_,
      ReportAvailable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAvailable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAvailable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportAvailable));
  ReportAvailableResponse_descriptor_ = file->message_type(1);
  static const int ReportAvailableResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAvailableResponse, result_),
  };
  ReportAvailableResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportAvailableResponse_descriptor_,
      ReportAvailableResponse::default_instance_,
      ReportAvailableResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAvailableResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportAvailableResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportAvailableResponse));
  ForwardingPacket_descriptor_ = file->message_type(2);
  static const int ForwardingPacket_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardingPacket, conn_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardingPacket, packet_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardingPacket, packet_body_),
  };
  ForwardingPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardingPacket_descriptor_,
      ForwardingPacket::default_instance_,
      ForwardingPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardingPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardingPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardingPacket));
  UserDisconnect_descriptor_ = file->message_type(3);
  static const int UserDisconnect_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDisconnect, user_id_),
  };
  UserDisconnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserDisconnect_descriptor_,
      UserDisconnect::default_instance_,
      UserDisconnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDisconnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDisconnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserDisconnect));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Gateway_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportAvailable_descriptor_, &ReportAvailable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportAvailableResponse_descriptor_, &ReportAvailableResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardingPacket_descriptor_, &ForwardingPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserDisconnect_descriptor_, &UserDisconnect::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Gateway_2eproto() {
  delete ReportAvailable::default_instance_;
  delete ReportAvailable_reflection_;
  delete ReportAvailableResponse::default_instance_;
  delete ReportAvailableResponse_reflection_;
  delete ForwardingPacket::default_instance_;
  delete ForwardingPacket_reflection_;
  delete UserDisconnect::default_instance_;
  delete UserDisconnect_reflection_;
}

void protobuf_AddDesc_Gateway_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rGateway.proto\022\rGatewayServer\"8\n\017Report"
    "Available\022\023\n\013server_name\030\001 \002(\t\022\020\n\010protoc"
    "ol\030\002 \003(\t\")\n\027ReportAvailableResponse\022\016\n\006r"
    "esult\030\001 \002(\r\"M\n\020ForwardingPacket\022\017\n\007conn_"
    "id\030\001 \002(\r\022\023\n\013packet_name\030\002 \002(\t\022\023\n\013packet_"
    "body\030\003 \002(\t\"!\n\016UserDisconnect\022\017\n\007user_id\030"
    "\001 \002(\r", 245);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Gateway.proto", &protobuf_RegisterTypes);
  ReportAvailable::default_instance_ = new ReportAvailable();
  ReportAvailableResponse::default_instance_ = new ReportAvailableResponse();
  ForwardingPacket::default_instance_ = new ForwardingPacket();
  UserDisconnect::default_instance_ = new UserDisconnect();
  ReportAvailable::default_instance_->InitAsDefaultInstance();
  ReportAvailableResponse::default_instance_->InitAsDefaultInstance();
  ForwardingPacket::default_instance_->InitAsDefaultInstance();
  UserDisconnect::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Gateway_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Gateway_2eproto {
  StaticDescriptorInitializer_Gateway_2eproto() {
    protobuf_AddDesc_Gateway_2eproto();
  }
} static_descriptor_initializer_Gateway_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ReportAvailable::kServerNameFieldNumber;
const int ReportAvailable::kProtocolFieldNumber;
#endif  // !_MSC_VER

ReportAvailable::ReportAvailable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportAvailable::InitAsDefaultInstance() {
}

ReportAvailable::ReportAvailable(const ReportAvailable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportAvailable::SharedCtor() {
  _cached_size_ = 0;
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportAvailable::~ReportAvailable() {
  SharedDtor();
}

void ReportAvailable::SharedDtor() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (this != default_instance_) {
  }
}

void ReportAvailable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportAvailable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportAvailable_descriptor_;
}

const ReportAvailable& ReportAvailable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Gateway_2eproto();  return *default_instance_;
}

ReportAvailable* ReportAvailable::default_instance_ = NULL;

ReportAvailable* ReportAvailable::New() const {
  return new ReportAvailable;
}

void ReportAvailable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
  }
  protocol_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportAvailable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string server_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_protocol;
        break;
      }
      
      // repeated string protocol = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_protocol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_protocol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->protocol(0).data(), this->protocol(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_protocol;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportAvailable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string server_name = 1;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->server_name(), output);
  }
  
  // repeated string protocol = 2;
  for (int i = 0; i < this->protocol_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->protocol(i).data(), this->protocol(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->protocol(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportAvailable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string server_name = 1;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->server_name(), target);
  }
  
  // repeated string protocol = 2;
  for (int i = 0; i < this->protocol_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->protocol(i).data(), this->protocol(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->protocol(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportAvailable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string server_name = 1;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }
    
  }
  // repeated string protocol = 2;
  total_size += 1 * this->protocol_size();
  for (int i = 0; i < this->protocol_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->protocol(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportAvailable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportAvailable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportAvailable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportAvailable::MergeFrom(const ReportAvailable& from) {
  GOOGLE_CHECK_NE(&from, this);
  protocol_.MergeFrom(from.protocol_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportAvailable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportAvailable::CopyFrom(const ReportAvailable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportAvailable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ReportAvailable::Swap(ReportAvailable* other) {
  if (other != this) {
    std::swap(server_name_, other->server_name_);
    protocol_.Swap(&other->protocol_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportAvailable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportAvailable_descriptor_;
  metadata.reflection = ReportAvailable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportAvailableResponse::kResultFieldNumber;
#endif  // !_MSC_VER

ReportAvailableResponse::ReportAvailableResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReportAvailableResponse::InitAsDefaultInstance() {
}

ReportAvailableResponse::ReportAvailableResponse(const ReportAvailableResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReportAvailableResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportAvailableResponse::~ReportAvailableResponse() {
  SharedDtor();
}

void ReportAvailableResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportAvailableResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportAvailableResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportAvailableResponse_descriptor_;
}

const ReportAvailableResponse& ReportAvailableResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Gateway_2eproto();  return *default_instance_;
}

ReportAvailableResponse* ReportAvailableResponse::default_instance_ = NULL;

ReportAvailableResponse* ReportAvailableResponse::New() const {
  return new ReportAvailableResponse;
}

void ReportAvailableResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportAvailableResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportAvailableResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportAvailableResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportAvailableResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportAvailableResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportAvailableResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportAvailableResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportAvailableResponse::MergeFrom(const ReportAvailableResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportAvailableResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportAvailableResponse::CopyFrom(const ReportAvailableResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportAvailableResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ReportAvailableResponse::Swap(ReportAvailableResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportAvailableResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportAvailableResponse_descriptor_;
  metadata.reflection = ReportAvailableResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForwardingPacket::kConnIdFieldNumber;
const int ForwardingPacket::kPacketNameFieldNumber;
const int ForwardingPacket::kPacketBodyFieldNumber;
#endif  // !_MSC_VER

ForwardingPacket::ForwardingPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ForwardingPacket::InitAsDefaultInstance() {
}

ForwardingPacket::ForwardingPacket(const ForwardingPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ForwardingPacket::SharedCtor() {
  _cached_size_ = 0;
  conn_id_ = 0u;
  packet_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  packet_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardingPacket::~ForwardingPacket() {
  SharedDtor();
}

void ForwardingPacket::SharedDtor() {
  if (packet_name_ != &::google::protobuf::internal::kEmptyString) {
    delete packet_name_;
  }
  if (packet_body_ != &::google::protobuf::internal::kEmptyString) {
    delete packet_body_;
  }
  if (this != default_instance_) {
  }
}

void ForwardingPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardingPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardingPacket_descriptor_;
}

const ForwardingPacket& ForwardingPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Gateway_2eproto();  return *default_instance_;
}

ForwardingPacket* ForwardingPacket::default_instance_ = NULL;

ForwardingPacket* ForwardingPacket::New() const {
  return new ForwardingPacket;
}

void ForwardingPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    conn_id_ = 0u;
    if (has_packet_name()) {
      if (packet_name_ != &::google::protobuf::internal::kEmptyString) {
        packet_name_->clear();
      }
    }
    if (has_packet_body()) {
      if (packet_body_ != &::google::protobuf::internal::kEmptyString) {
        packet_body_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardingPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 conn_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &conn_id_)));
          set_has_conn_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_packet_name;
        break;
      }
      
      // required string packet_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packet_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packet_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->packet_name().data(), this->packet_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_packet_body;
        break;
      }
      
      // required string packet_body = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packet_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packet_body()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->packet_body().data(), this->packet_body().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ForwardingPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 conn_id = 1;
  if (has_conn_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->conn_id(), output);
  }
  
  // required string packet_name = 2;
  if (has_packet_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->packet_name().data(), this->packet_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->packet_name(), output);
  }
  
  // required string packet_body = 3;
  if (has_packet_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->packet_body().data(), this->packet_body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->packet_body(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ForwardingPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 conn_id = 1;
  if (has_conn_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->conn_id(), target);
  }
  
  // required string packet_name = 2;
  if (has_packet_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->packet_name().data(), this->packet_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->packet_name(), target);
  }
  
  // required string packet_body = 3;
  if (has_packet_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->packet_body().data(), this->packet_body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->packet_body(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ForwardingPacket::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 conn_id = 1;
    if (has_conn_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->conn_id());
    }
    
    // required string packet_name = 2;
    if (has_packet_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->packet_name());
    }
    
    // required string packet_body = 3;
    if (has_packet_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->packet_body());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardingPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardingPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardingPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardingPacket::MergeFrom(const ForwardingPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_conn_id()) {
      set_conn_id(from.conn_id());
    }
    if (from.has_packet_name()) {
      set_packet_name(from.packet_name());
    }
    if (from.has_packet_body()) {
      set_packet_body(from.packet_body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardingPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardingPacket::CopyFrom(const ForwardingPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardingPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void ForwardingPacket::Swap(ForwardingPacket* other) {
  if (other != this) {
    std::swap(conn_id_, other->conn_id_);
    std::swap(packet_name_, other->packet_name_);
    std::swap(packet_body_, other->packet_body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardingPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardingPacket_descriptor_;
  metadata.reflection = ForwardingPacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserDisconnect::kUserIdFieldNumber;
#endif  // !_MSC_VER

UserDisconnect::UserDisconnect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserDisconnect::InitAsDefaultInstance() {
}

UserDisconnect::UserDisconnect(const UserDisconnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserDisconnect::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserDisconnect::~UserDisconnect() {
  SharedDtor();
}

void UserDisconnect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserDisconnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserDisconnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserDisconnect_descriptor_;
}

const UserDisconnect& UserDisconnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Gateway_2eproto();  return *default_instance_;
}

UserDisconnect* UserDisconnect::default_instance_ = NULL;

UserDisconnect* UserDisconnect::New() const {
  return new UserDisconnect;
}

void UserDisconnect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserDisconnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserDisconnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserDisconnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserDisconnect::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserDisconnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserDisconnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserDisconnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserDisconnect::MergeFrom(const UserDisconnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserDisconnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDisconnect::CopyFrom(const UserDisconnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDisconnect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UserDisconnect::Swap(UserDisconnect* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserDisconnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserDisconnect_descriptor_;
  metadata.reflection = UserDisconnect_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GatewayServer

// @@protoc_insertion_point(global_scope)
