// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RpcServer.proto

#ifndef PROTOBUF_RpcServer_2eproto__INCLUDED
#define PROTOBUF_RpcServer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace RpcServer {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RpcServer_2eproto();
void protobuf_AssignDesc_RpcServer_2eproto();
void protobuf_ShutdownFile_RpcServer_2eproto();

class LoginRequest;
class LoginResponse;
class RpcRequest;
class RpcResponse;
class RpcError;

enum EnumResult {
  result_success = 0,
  result_fail = 1
};
bool EnumResult_IsValid(int value);
const EnumResult EnumResult_MIN = result_success;
const EnumResult EnumResult_MAX = result_fail;
const int EnumResult_ARRAYSIZE = EnumResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* EnumResult_descriptor();
inline const ::std::string& EnumResult_Name(EnumResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    EnumResult_descriptor(), value);
}
inline bool EnumResult_Parse(
    const ::std::string& name, EnumResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EnumResult>(
    EnumResult_descriptor(), name, value);
}
// ===================================================================

class LoginRequest : public ::google::protobuf::Message {
 public:
  LoginRequest();
  virtual ~LoginRequest();
  
  LoginRequest(const LoginRequest& from);
  
  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRequest& default_instance();
  
  void Swap(LoginRequest* other);
  
  // implements Message ----------------------------------------------
  
  LoginRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string service_name = 1;
  inline bool has_service_name() const;
  inline void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  inline const ::std::string& service_name() const;
  inline void set_service_name(const ::std::string& value);
  inline void set_service_name(const char* value);
  inline void set_service_name(const char* value, size_t size);
  inline ::std::string* mutable_service_name();
  inline ::std::string* release_service_name();
  
  // required string secure_key = 2;
  inline bool has_secure_key() const;
  inline void clear_secure_key();
  static const int kSecureKeyFieldNumber = 2;
  inline const ::std::string& secure_key() const;
  inline void set_secure_key(const ::std::string& value);
  inline void set_secure_key(const char* value);
  inline void set_secure_key(const char* value, size_t size);
  inline ::std::string* mutable_secure_key();
  inline ::std::string* release_secure_key();
  
  // @@protoc_insertion_point(class_scope:RpcServer.LoginRequest)
 private:
  inline void set_has_service_name();
  inline void clear_has_service_name();
  inline void set_has_secure_key();
  inline void clear_has_secure_key();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* service_name_;
  ::std::string* secure_key_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_RpcServer_2eproto();
  friend void protobuf_AssignDesc_RpcServer_2eproto();
  friend void protobuf_ShutdownFile_RpcServer_2eproto();
  
  void InitAsDefaultInstance();
  static LoginRequest* default_instance_;
};
// -------------------------------------------------------------------

class LoginResponse : public ::google::protobuf::Message {
 public:
  LoginResponse();
  virtual ~LoginResponse();
  
  LoginResponse(const LoginResponse& from);
  
  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginResponse& default_instance();
  
  void Swap(LoginResponse* other);
  
  // implements Message ----------------------------------------------
  
  LoginResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .RpcServer.EnumResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline RpcServer::EnumResult result() const;
  inline void set_result(RpcServer::EnumResult value);
  
  // optional string fail_reason = 2;
  inline bool has_fail_reason() const;
  inline void clear_fail_reason();
  static const int kFailReasonFieldNumber = 2;
  inline const ::std::string& fail_reason() const;
  inline void set_fail_reason(const ::std::string& value);
  inline void set_fail_reason(const char* value);
  inline void set_fail_reason(const char* value, size_t size);
  inline ::std::string* mutable_fail_reason();
  inline ::std::string* release_fail_reason();
  
  // @@protoc_insertion_point(class_scope:RpcServer.LoginResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_fail_reason();
  inline void clear_has_fail_reason();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* fail_reason_;
  int result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_RpcServer_2eproto();
  friend void protobuf_AssignDesc_RpcServer_2eproto();
  friend void protobuf_ShutdownFile_RpcServer_2eproto();
  
  void InitAsDefaultInstance();
  static LoginResponse* default_instance_;
};
// -------------------------------------------------------------------

class RpcRequest : public ::google::protobuf::Message {
 public:
  RpcRequest();
  virtual ~RpcRequest();
  
  RpcRequest(const RpcRequest& from);
  
  inline RpcRequest& operator=(const RpcRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcRequest& default_instance();
  
  void Swap(RpcRequest* other);
  
  // implements Message ----------------------------------------------
  
  RpcRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcRequest& from);
  void MergeFrom(const RpcRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string service_name = 1;
  inline bool has_service_name() const;
  inline void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  inline const ::std::string& service_name() const;
  inline void set_service_name(const ::std::string& value);
  inline void set_service_name(const char* value);
  inline void set_service_name(const char* value, size_t size);
  inline ::std::string* mutable_service_name();
  inline ::std::string* release_service_name();
  
  // required string requestor = 2;
  inline bool has_requestor() const;
  inline void clear_requestor();
  static const int kRequestorFieldNumber = 2;
  inline const ::std::string& requestor() const;
  inline void set_requestor(const ::std::string& value);
  inline void set_requestor(const char* value);
  inline void set_requestor(const char* value, size_t size);
  inline ::std::string* mutable_requestor();
  inline ::std::string* release_requestor();
  
  // required uint64 callback_id = 3;
  inline bool has_callback_id() const;
  inline void clear_callback_id();
  static const int kCallbackIdFieldNumber = 3;
  inline ::google::protobuf::uint64 callback_id() const;
  inline void set_callback_id(::google::protobuf::uint64 value);
  
  // required string request_name = 4;
  inline bool has_request_name() const;
  inline void clear_request_name();
  static const int kRequestNameFieldNumber = 4;
  inline const ::std::string& request_name() const;
  inline void set_request_name(const ::std::string& value);
  inline void set_request_name(const char* value);
  inline void set_request_name(const char* value, size_t size);
  inline ::std::string* mutable_request_name();
  inline ::std::string* release_request_name();
  
  // required string request_body = 5;
  inline bool has_request_body() const;
  inline void clear_request_body();
  static const int kRequestBodyFieldNumber = 5;
  inline const ::std::string& request_body() const;
  inline void set_request_body(const ::std::string& value);
  inline void set_request_body(const char* value);
  inline void set_request_body(const char* value, size_t size);
  inline ::std::string* mutable_request_body();
  inline ::std::string* release_request_body();
  
  // @@protoc_insertion_point(class_scope:RpcServer.RpcRequest)
 private:
  inline void set_has_service_name();
  inline void clear_has_service_name();
  inline void set_has_requestor();
  inline void clear_has_requestor();
  inline void set_has_callback_id();
  inline void clear_has_callback_id();
  inline void set_has_request_name();
  inline void clear_has_request_name();
  inline void set_has_request_body();
  inline void clear_has_request_body();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* service_name_;
  ::std::string* requestor_;
  ::google::protobuf::uint64 callback_id_;
  ::std::string* request_name_;
  ::std::string* request_body_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_RpcServer_2eproto();
  friend void protobuf_AssignDesc_RpcServer_2eproto();
  friend void protobuf_ShutdownFile_RpcServer_2eproto();
  
  void InitAsDefaultInstance();
  static RpcRequest* default_instance_;
};
// -------------------------------------------------------------------

class RpcResponse : public ::google::protobuf::Message {
 public:
  RpcResponse();
  virtual ~RpcResponse();
  
  RpcResponse(const RpcResponse& from);
  
  inline RpcResponse& operator=(const RpcResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcResponse& default_instance();
  
  void Swap(RpcResponse* other);
  
  // implements Message ----------------------------------------------
  
  RpcResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcResponse& from);
  void MergeFrom(const RpcResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string service_name = 1;
  inline bool has_service_name() const;
  inline void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  inline const ::std::string& service_name() const;
  inline void set_service_name(const ::std::string& value);
  inline void set_service_name(const char* value);
  inline void set_service_name(const char* value, size_t size);
  inline ::std::string* mutable_service_name();
  inline ::std::string* release_service_name();
  
  // required string requestor = 2;
  inline bool has_requestor() const;
  inline void clear_requestor();
  static const int kRequestorFieldNumber = 2;
  inline const ::std::string& requestor() const;
  inline void set_requestor(const ::std::string& value);
  inline void set_requestor(const char* value);
  inline void set_requestor(const char* value, size_t size);
  inline ::std::string* mutable_requestor();
  inline ::std::string* release_requestor();
  
  // required uint64 callback_id = 3;
  inline bool has_callback_id() const;
  inline void clear_callback_id();
  static const int kCallbackIdFieldNumber = 3;
  inline ::google::protobuf::uint64 callback_id() const;
  inline void set_callback_id(::google::protobuf::uint64 value);
  
  // required string response_name = 4;
  inline bool has_response_name() const;
  inline void clear_response_name();
  static const int kResponseNameFieldNumber = 4;
  inline const ::std::string& response_name() const;
  inline void set_response_name(const ::std::string& value);
  inline void set_response_name(const char* value);
  inline void set_response_name(const char* value, size_t size);
  inline ::std::string* mutable_response_name();
  inline ::std::string* release_response_name();
  
  // required string response_body = 5;
  inline bool has_response_body() const;
  inline void clear_response_body();
  static const int kResponseBodyFieldNumber = 5;
  inline const ::std::string& response_body() const;
  inline void set_response_body(const ::std::string& value);
  inline void set_response_body(const char* value);
  inline void set_response_body(const char* value, size_t size);
  inline ::std::string* mutable_response_body();
  inline ::std::string* release_response_body();
  
  // @@protoc_insertion_point(class_scope:RpcServer.RpcResponse)
 private:
  inline void set_has_service_name();
  inline void clear_has_service_name();
  inline void set_has_requestor();
  inline void clear_has_requestor();
  inline void set_has_callback_id();
  inline void clear_has_callback_id();
  inline void set_has_response_name();
  inline void clear_has_response_name();
  inline void set_has_response_body();
  inline void clear_has_response_body();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* service_name_;
  ::std::string* requestor_;
  ::google::protobuf::uint64 callback_id_;
  ::std::string* response_name_;
  ::std::string* response_body_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_RpcServer_2eproto();
  friend void protobuf_AssignDesc_RpcServer_2eproto();
  friend void protobuf_ShutdownFile_RpcServer_2eproto();
  
  void InitAsDefaultInstance();
  static RpcResponse* default_instance_;
};
// -------------------------------------------------------------------

class RpcError : public ::google::protobuf::Message {
 public:
  RpcError();
  virtual ~RpcError();
  
  RpcError(const RpcError& from);
  
  inline RpcError& operator=(const RpcError& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcError& default_instance();
  
  void Swap(RpcError* other);
  
  // implements Message ----------------------------------------------
  
  RpcError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcError& from);
  void MergeFrom(const RpcError& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline const ::std::string& error() const;
  inline void set_error(const ::std::string& value);
  inline void set_error(const char* value);
  inline void set_error(const char* value, size_t size);
  inline ::std::string* mutable_error();
  inline ::std::string* release_error();
  
  // @@protoc_insertion_point(class_scope:RpcServer.RpcError)
 private:
  inline void set_has_error();
  inline void clear_has_error();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* error_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_RpcServer_2eproto();
  friend void protobuf_AssignDesc_RpcServer_2eproto();
  friend void protobuf_ShutdownFile_RpcServer_2eproto();
  
  void InitAsDefaultInstance();
  static RpcError* default_instance_;
};
// ===================================================================


// ===================================================================

// LoginRequest

// required string service_name = 1;
inline bool LoginRequest::has_service_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRequest::set_has_service_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRequest::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRequest::clear_service_name() {
  if (service_name_ != &::google::protobuf::internal::kEmptyString) {
    service_name_->clear();
  }
  clear_has_service_name();
}
inline const ::std::string& LoginRequest::service_name() const {
  return *service_name_;
}
inline void LoginRequest::set_service_name(const ::std::string& value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
}
inline void LoginRequest::set_service_name(const char* value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
}
inline void LoginRequest::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRequest::mutable_service_name() {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  return service_name_;
}
inline ::std::string* LoginRequest::release_service_name() {
  clear_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = service_name_;
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string secure_key = 2;
inline bool LoginRequest::has_secure_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRequest::set_has_secure_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRequest::clear_has_secure_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRequest::clear_secure_key() {
  if (secure_key_ != &::google::protobuf::internal::kEmptyString) {
    secure_key_->clear();
  }
  clear_has_secure_key();
}
inline const ::std::string& LoginRequest::secure_key() const {
  return *secure_key_;
}
inline void LoginRequest::set_secure_key(const ::std::string& value) {
  set_has_secure_key();
  if (secure_key_ == &::google::protobuf::internal::kEmptyString) {
    secure_key_ = new ::std::string;
  }
  secure_key_->assign(value);
}
inline void LoginRequest::set_secure_key(const char* value) {
  set_has_secure_key();
  if (secure_key_ == &::google::protobuf::internal::kEmptyString) {
    secure_key_ = new ::std::string;
  }
  secure_key_->assign(value);
}
inline void LoginRequest::set_secure_key(const char* value, size_t size) {
  set_has_secure_key();
  if (secure_key_ == &::google::protobuf::internal::kEmptyString) {
    secure_key_ = new ::std::string;
  }
  secure_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRequest::mutable_secure_key() {
  set_has_secure_key();
  if (secure_key_ == &::google::protobuf::internal::kEmptyString) {
    secure_key_ = new ::std::string;
  }
  return secure_key_;
}
inline ::std::string* LoginRequest::release_secure_key() {
  clear_has_secure_key();
  if (secure_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = secure_key_;
    secure_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// LoginResponse

// required .RpcServer.EnumResult result = 1;
inline bool LoginResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline RpcServer::EnumResult LoginResponse::result() const {
  return static_cast< RpcServer::EnumResult >(result_);
}
inline void LoginResponse::set_result(RpcServer::EnumResult value) {
  GOOGLE_DCHECK(RpcServer::EnumResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional string fail_reason = 2;
inline bool LoginResponse::has_fail_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginResponse::set_has_fail_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginResponse::clear_has_fail_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginResponse::clear_fail_reason() {
  if (fail_reason_ != &::google::protobuf::internal::kEmptyString) {
    fail_reason_->clear();
  }
  clear_has_fail_reason();
}
inline const ::std::string& LoginResponse::fail_reason() const {
  return *fail_reason_;
}
inline void LoginResponse::set_fail_reason(const ::std::string& value) {
  set_has_fail_reason();
  if (fail_reason_ == &::google::protobuf::internal::kEmptyString) {
    fail_reason_ = new ::std::string;
  }
  fail_reason_->assign(value);
}
inline void LoginResponse::set_fail_reason(const char* value) {
  set_has_fail_reason();
  if (fail_reason_ == &::google::protobuf::internal::kEmptyString) {
    fail_reason_ = new ::std::string;
  }
  fail_reason_->assign(value);
}
inline void LoginResponse::set_fail_reason(const char* value, size_t size) {
  set_has_fail_reason();
  if (fail_reason_ == &::google::protobuf::internal::kEmptyString) {
    fail_reason_ = new ::std::string;
  }
  fail_reason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginResponse::mutable_fail_reason() {
  set_has_fail_reason();
  if (fail_reason_ == &::google::protobuf::internal::kEmptyString) {
    fail_reason_ = new ::std::string;
  }
  return fail_reason_;
}
inline ::std::string* LoginResponse::release_fail_reason() {
  clear_has_fail_reason();
  if (fail_reason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fail_reason_;
    fail_reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RpcRequest

// required string service_name = 1;
inline bool RpcRequest::has_service_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcRequest::set_has_service_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcRequest::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcRequest::clear_service_name() {
  if (service_name_ != &::google::protobuf::internal::kEmptyString) {
    service_name_->clear();
  }
  clear_has_service_name();
}
inline const ::std::string& RpcRequest::service_name() const {
  return *service_name_;
}
inline void RpcRequest::set_service_name(const ::std::string& value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
}
inline void RpcRequest::set_service_name(const char* value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
}
inline void RpcRequest::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcRequest::mutable_service_name() {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  return service_name_;
}
inline ::std::string* RpcRequest::release_service_name() {
  clear_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = service_name_;
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string requestor = 2;
inline bool RpcRequest::has_requestor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcRequest::set_has_requestor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcRequest::clear_has_requestor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcRequest::clear_requestor() {
  if (requestor_ != &::google::protobuf::internal::kEmptyString) {
    requestor_->clear();
  }
  clear_has_requestor();
}
inline const ::std::string& RpcRequest::requestor() const {
  return *requestor_;
}
inline void RpcRequest::set_requestor(const ::std::string& value) {
  set_has_requestor();
  if (requestor_ == &::google::protobuf::internal::kEmptyString) {
    requestor_ = new ::std::string;
  }
  requestor_->assign(value);
}
inline void RpcRequest::set_requestor(const char* value) {
  set_has_requestor();
  if (requestor_ == &::google::protobuf::internal::kEmptyString) {
    requestor_ = new ::std::string;
  }
  requestor_->assign(value);
}
inline void RpcRequest::set_requestor(const char* value, size_t size) {
  set_has_requestor();
  if (requestor_ == &::google::protobuf::internal::kEmptyString) {
    requestor_ = new ::std::string;
  }
  requestor_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcRequest::mutable_requestor() {
  set_has_requestor();
  if (requestor_ == &::google::protobuf::internal::kEmptyString) {
    requestor_ = new ::std::string;
  }
  return requestor_;
}
inline ::std::string* RpcRequest::release_requestor() {
  clear_has_requestor();
  if (requestor_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = requestor_;
    requestor_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint64 callback_id = 3;
inline bool RpcRequest::has_callback_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpcRequest::set_has_callback_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpcRequest::clear_has_callback_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpcRequest::clear_callback_id() {
  callback_id_ = GOOGLE_ULONGLONG(0);
  clear_has_callback_id();
}
inline ::google::protobuf::uint64 RpcRequest::callback_id() const {
  return callback_id_;
}
inline void RpcRequest::set_callback_id(::google::protobuf::uint64 value) {
  set_has_callback_id();
  callback_id_ = value;
}

// required string request_name = 4;
inline bool RpcRequest::has_request_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RpcRequest::set_has_request_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RpcRequest::clear_has_request_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RpcRequest::clear_request_name() {
  if (request_name_ != &::google::protobuf::internal::kEmptyString) {
    request_name_->clear();
  }
  clear_has_request_name();
}
inline const ::std::string& RpcRequest::request_name() const {
  return *request_name_;
}
inline void RpcRequest::set_request_name(const ::std::string& value) {
  set_has_request_name();
  if (request_name_ == &::google::protobuf::internal::kEmptyString) {
    request_name_ = new ::std::string;
  }
  request_name_->assign(value);
}
inline void RpcRequest::set_request_name(const char* value) {
  set_has_request_name();
  if (request_name_ == &::google::protobuf::internal::kEmptyString) {
    request_name_ = new ::std::string;
  }
  request_name_->assign(value);
}
inline void RpcRequest::set_request_name(const char* value, size_t size) {
  set_has_request_name();
  if (request_name_ == &::google::protobuf::internal::kEmptyString) {
    request_name_ = new ::std::string;
  }
  request_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcRequest::mutable_request_name() {
  set_has_request_name();
  if (request_name_ == &::google::protobuf::internal::kEmptyString) {
    request_name_ = new ::std::string;
  }
  return request_name_;
}
inline ::std::string* RpcRequest::release_request_name() {
  clear_has_request_name();
  if (request_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = request_name_;
    request_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string request_body = 5;
inline bool RpcRequest::has_request_body() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RpcRequest::set_has_request_body() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RpcRequest::clear_has_request_body() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RpcRequest::clear_request_body() {
  if (request_body_ != &::google::protobuf::internal::kEmptyString) {
    request_body_->clear();
  }
  clear_has_request_body();
}
inline const ::std::string& RpcRequest::request_body() const {
  return *request_body_;
}
inline void RpcRequest::set_request_body(const ::std::string& value) {
  set_has_request_body();
  if (request_body_ == &::google::protobuf::internal::kEmptyString) {
    request_body_ = new ::std::string;
  }
  request_body_->assign(value);
}
inline void RpcRequest::set_request_body(const char* value) {
  set_has_request_body();
  if (request_body_ == &::google::protobuf::internal::kEmptyString) {
    request_body_ = new ::std::string;
  }
  request_body_->assign(value);
}
inline void RpcRequest::set_request_body(const char* value, size_t size) {
  set_has_request_body();
  if (request_body_ == &::google::protobuf::internal::kEmptyString) {
    request_body_ = new ::std::string;
  }
  request_body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcRequest::mutable_request_body() {
  set_has_request_body();
  if (request_body_ == &::google::protobuf::internal::kEmptyString) {
    request_body_ = new ::std::string;
  }
  return request_body_;
}
inline ::std::string* RpcRequest::release_request_body() {
  clear_has_request_body();
  if (request_body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = request_body_;
    request_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RpcResponse

// required string service_name = 1;
inline bool RpcResponse::has_service_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcResponse::set_has_service_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcResponse::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcResponse::clear_service_name() {
  if (service_name_ != &::google::protobuf::internal::kEmptyString) {
    service_name_->clear();
  }
  clear_has_service_name();
}
inline const ::std::string& RpcResponse::service_name() const {
  return *service_name_;
}
inline void RpcResponse::set_service_name(const ::std::string& value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
}
inline void RpcResponse::set_service_name(const char* value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
}
inline void RpcResponse::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcResponse::mutable_service_name() {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  return service_name_;
}
inline ::std::string* RpcResponse::release_service_name() {
  clear_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = service_name_;
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string requestor = 2;
inline bool RpcResponse::has_requestor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcResponse::set_has_requestor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RpcResponse::clear_has_requestor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RpcResponse::clear_requestor() {
  if (requestor_ != &::google::protobuf::internal::kEmptyString) {
    requestor_->clear();
  }
  clear_has_requestor();
}
inline const ::std::string& RpcResponse::requestor() const {
  return *requestor_;
}
inline void RpcResponse::set_requestor(const ::std::string& value) {
  set_has_requestor();
  if (requestor_ == &::google::protobuf::internal::kEmptyString) {
    requestor_ = new ::std::string;
  }
  requestor_->assign(value);
}
inline void RpcResponse::set_requestor(const char* value) {
  set_has_requestor();
  if (requestor_ == &::google::protobuf::internal::kEmptyString) {
    requestor_ = new ::std::string;
  }
  requestor_->assign(value);
}
inline void RpcResponse::set_requestor(const char* value, size_t size) {
  set_has_requestor();
  if (requestor_ == &::google::protobuf::internal::kEmptyString) {
    requestor_ = new ::std::string;
  }
  requestor_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcResponse::mutable_requestor() {
  set_has_requestor();
  if (requestor_ == &::google::protobuf::internal::kEmptyString) {
    requestor_ = new ::std::string;
  }
  return requestor_;
}
inline ::std::string* RpcResponse::release_requestor() {
  clear_has_requestor();
  if (requestor_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = requestor_;
    requestor_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint64 callback_id = 3;
inline bool RpcResponse::has_callback_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpcResponse::set_has_callback_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RpcResponse::clear_has_callback_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RpcResponse::clear_callback_id() {
  callback_id_ = GOOGLE_ULONGLONG(0);
  clear_has_callback_id();
}
inline ::google::protobuf::uint64 RpcResponse::callback_id() const {
  return callback_id_;
}
inline void RpcResponse::set_callback_id(::google::protobuf::uint64 value) {
  set_has_callback_id();
  callback_id_ = value;
}

// required string response_name = 4;
inline bool RpcResponse::has_response_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RpcResponse::set_has_response_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RpcResponse::clear_has_response_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RpcResponse::clear_response_name() {
  if (response_name_ != &::google::protobuf::internal::kEmptyString) {
    response_name_->clear();
  }
  clear_has_response_name();
}
inline const ::std::string& RpcResponse::response_name() const {
  return *response_name_;
}
inline void RpcResponse::set_response_name(const ::std::string& value) {
  set_has_response_name();
  if (response_name_ == &::google::protobuf::internal::kEmptyString) {
    response_name_ = new ::std::string;
  }
  response_name_->assign(value);
}
inline void RpcResponse::set_response_name(const char* value) {
  set_has_response_name();
  if (response_name_ == &::google::protobuf::internal::kEmptyString) {
    response_name_ = new ::std::string;
  }
  response_name_->assign(value);
}
inline void RpcResponse::set_response_name(const char* value, size_t size) {
  set_has_response_name();
  if (response_name_ == &::google::protobuf::internal::kEmptyString) {
    response_name_ = new ::std::string;
  }
  response_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcResponse::mutable_response_name() {
  set_has_response_name();
  if (response_name_ == &::google::protobuf::internal::kEmptyString) {
    response_name_ = new ::std::string;
  }
  return response_name_;
}
inline ::std::string* RpcResponse::release_response_name() {
  clear_has_response_name();
  if (response_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = response_name_;
    response_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string response_body = 5;
inline bool RpcResponse::has_response_body() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RpcResponse::set_has_response_body() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RpcResponse::clear_has_response_body() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RpcResponse::clear_response_body() {
  if (response_body_ != &::google::protobuf::internal::kEmptyString) {
    response_body_->clear();
  }
  clear_has_response_body();
}
inline const ::std::string& RpcResponse::response_body() const {
  return *response_body_;
}
inline void RpcResponse::set_response_body(const ::std::string& value) {
  set_has_response_body();
  if (response_body_ == &::google::protobuf::internal::kEmptyString) {
    response_body_ = new ::std::string;
  }
  response_body_->assign(value);
}
inline void RpcResponse::set_response_body(const char* value) {
  set_has_response_body();
  if (response_body_ == &::google::protobuf::internal::kEmptyString) {
    response_body_ = new ::std::string;
  }
  response_body_->assign(value);
}
inline void RpcResponse::set_response_body(const char* value, size_t size) {
  set_has_response_body();
  if (response_body_ == &::google::protobuf::internal::kEmptyString) {
    response_body_ = new ::std::string;
  }
  response_body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcResponse::mutable_response_body() {
  set_has_response_body();
  if (response_body_ == &::google::protobuf::internal::kEmptyString) {
    response_body_ = new ::std::string;
  }
  return response_body_;
}
inline ::std::string* RpcResponse::release_response_body() {
  clear_has_response_body();
  if (response_body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = response_body_;
    response_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RpcError

// required string error = 1;
inline bool RpcError::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcError::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RpcError::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RpcError::clear_error() {
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    error_->clear();
  }
  clear_has_error();
}
inline const ::std::string& RpcError::error() const {
  return *error_;
}
inline void RpcError::set_error(const ::std::string& value) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    error_ = new ::std::string;
  }
  error_->assign(value);
}
inline void RpcError::set_error(const char* value) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    error_ = new ::std::string;
  }
  error_->assign(value);
}
inline void RpcError::set_error(const char* value, size_t size) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    error_ = new ::std::string;
  }
  error_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcError::mutable_error() {
  set_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    error_ = new ::std::string;
  }
  return error_;
}
inline ::std::string* RpcError::release_error() {
  clear_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_;
    error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace RpcServer

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< RpcServer::EnumResult>() {
  return RpcServer::EnumResult_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RpcServer_2eproto__INCLUDED
