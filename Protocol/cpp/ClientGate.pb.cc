// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ClientGate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace ClientGate {

void protobuf_ShutdownFile_ClientGate_2eproto() {
  delete LoginRequest::default_instance_;
  delete BasicUserInfo::default_instance_;
  delete LoginResponse::default_instance_;
}

void protobuf_AddDesc_ClientGate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  LoginRequest::default_instance_ = new LoginRequest();
  BasicUserInfo::default_instance_ = new BasicUserInfo();
  LoginResponse::default_instance_ = new LoginResponse();
  LoginRequest::default_instance_->InitAsDefaultInstance();
  BasicUserInfo::default_instance_->InitAsDefaultInstance();
  LoginResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ClientGate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ClientGate_2eproto {
  StaticDescriptorInitializer_ClientGate_2eproto() {
    protobuf_AddDesc_ClientGate_2eproto();
  }
} static_descriptor_initializer_ClientGate_2eproto_;

bool EnumLoginType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool EnumGender_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool EnumDeviceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool EnumResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

bool EnumNewVersion_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool EnumVIPLevel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRequest::kLoginTypeFieldNumber;
const int LoginRequest::kAccountFieldNumber;
const int LoginRequest::kPasswordFieldNumber;
const int LoginRequest::kNickFieldNumber;
const int LoginRequest::kGenderFieldNumber;
const int LoginRequest::kDeviceTypeFieldNumber;
const int LoginRequest::kDeviceIdFieldNumber;
const int LoginRequest::kDeviceTokenFieldNumber;
const int LoginRequest::kMacFieldNumber;
const int LoginRequest::kSecureKeyFieldNumber;
const int LoginRequest::kChannelFieldNumber;
const int LoginRequest::kVersionFieldNumber;
const int LoginRequest::kPhoneNoFieldNumber;
#endif  // !_MSC_VER

LoginRequest::LoginRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LoginRequest::InitAsDefaultInstance() {
}

LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRequest::SharedCtor() {
  _cached_size_ = 0;
  login_type_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gender_ = 0;
  device_type_ = 0;
  device_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  secure_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = 0u;
  phone_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRequest::~LoginRequest() {
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_;
  }
  if (device_id_ != &::google::protobuf::internal::kEmptyString) {
    delete device_id_;
  }
  if (device_token_ != &::google::protobuf::internal::kEmptyString) {
    delete device_token_;
  }
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    delete mac_;
  }
  if (secure_key_ != &::google::protobuf::internal::kEmptyString) {
    delete secure_key_;
  }
  if (channel_ != &::google::protobuf::internal::kEmptyString) {
    delete channel_;
  }
  if (phone_no_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_no_;
  }
  if (this != default_instance_) {
  }
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LoginRequest& LoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientGate_2eproto();  return *default_instance_;
}

LoginRequest* LoginRequest::default_instance_ = NULL;

LoginRequest* LoginRequest::New() const {
  return new LoginRequest;
}

void LoginRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    login_type_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_nick()) {
      if (nick_ != &::google::protobuf::internal::kEmptyString) {
        nick_->clear();
      }
    }
    gender_ = 0;
    device_type_ = 0;
    if (has_device_id()) {
      if (device_id_ != &::google::protobuf::internal::kEmptyString) {
        device_id_->clear();
      }
    }
    if (has_device_token()) {
      if (device_token_ != &::google::protobuf::internal::kEmptyString) {
        device_token_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_mac()) {
      if (mac_ != &::google::protobuf::internal::kEmptyString) {
        mac_->clear();
      }
    }
    if (has_secure_key()) {
      if (secure_key_ != &::google::protobuf::internal::kEmptyString) {
        secure_key_->clear();
      }
    }
    if (has_channel()) {
      if (channel_ != &::google::protobuf::internal::kEmptyString) {
        channel_->clear();
      }
    }
    version_ = 0u;
    if (has_phone_no()) {
      if (phone_no_ != &::google::protobuf::internal::kEmptyString) {
        phone_no_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ClientGate.EnumLoginType login_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ClientGate::EnumLoginType_IsValid(value)) {
            set_login_type(static_cast< ClientGate::EnumLoginType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }
      
      // required string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }
      
      // required string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_nick;
        break;
      }
      
      // required string nick = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gender;
        break;
      }
      
      // required .ClientGate.EnumGender gender = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ClientGate::EnumGender_IsValid(value)) {
            set_gender(static_cast< ClientGate::EnumGender >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_device_type;
        break;
      }
      
      // required .ClientGate.EnumDeviceType device_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_device_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ClientGate::EnumDeviceType_IsValid(value)) {
            set_device_type(static_cast< ClientGate::EnumDeviceType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_device_id;
        break;
      }
      
      // required string device_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_device_token;
        break;
      }
      
      // optional string device_token = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_token()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_mac;
        break;
      }
      
      // required string mac = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_secure_key;
        break;
      }
      
      // required string secure_key = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_secure_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secure_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_channel;
        break;
      }
      
      // required string channel = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_version;
        break;
      }
      
      // required uint32 version = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_phone_no;
        break;
      }
      
      // optional string phone_no = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phone_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone_no()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ClientGate.EnumLoginType login_type = 1;
  if (has_login_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->login_type(), output);
  }
  
  // required string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }
  
  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }
  
  // required string nick = 4;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->nick(), output);
  }
  
  // required .ClientGate.EnumGender gender = 5;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->gender(), output);
  }
  
  // required .ClientGate.EnumDeviceType device_type = 6;
  if (has_device_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->device_type(), output);
  }
  
  // required string device_id = 7;
  if (has_device_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->device_id(), output);
  }
  
  // optional string device_token = 8;
  if (has_device_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->device_token(), output);
  }
  
  // required string mac = 9;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->mac(), output);
  }
  
  // required string secure_key = 10;
  if (has_secure_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->secure_key(), output);
  }
  
  // required string channel = 11;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->channel(), output);
  }
  
  // required uint32 version = 12;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->version(), output);
  }
  
  // optional string phone_no = 13;
  if (has_phone_no()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->phone_no(), output);
  }
  
}

int LoginRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ClientGate.EnumLoginType login_type = 1;
    if (has_login_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->login_type());
    }
    
    // required string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }
    
    // required string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // required string nick = 4;
    if (has_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick());
    }
    
    // required .ClientGate.EnumGender gender = 5;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }
    
    // required .ClientGate.EnumDeviceType device_type = 6;
    if (has_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->device_type());
    }
    
    // required string device_id = 7;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_id());
    }
    
    // optional string device_token = 8;
    if (has_device_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_token());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string mac = 9;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac());
    }
    
    // required string secure_key = 10;
    if (has_secure_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secure_key());
    }
    
    // required string channel = 11;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel());
    }
    
    // required uint32 version = 12;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }
    
    // optional string phone_no = 13;
    if (has_phone_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone_no());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LoginRequest*>(&from));
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_login_type()) {
      set_login_type(from.login_type());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_nick()) {
      set_nick(from.nick());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_device_type()) {
      set_device_type(from.device_type());
    }
    if (from.has_device_id()) {
      set_device_id(from.device_id());
    }
    if (from.has_device_token()) {
      set_device_token(from.device_token());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mac()) {
      set_mac(from.mac());
    }
    if (from.has_secure_key()) {
      set_secure_key(from.secure_key());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_phone_no()) {
      set_phone_no(from.phone_no());
    }
  }
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000f7f) != 0x00000f7f) return false;
  
  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other != this) {
    std::swap(login_type_, other->login_type_);
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(nick_, other->nick_);
    std::swap(gender_, other->gender_);
    std::swap(device_type_, other->device_type_);
    std::swap(device_id_, other->device_id_);
    std::swap(device_token_, other->device_token_);
    std::swap(mac_, other->mac_);
    std::swap(secure_key_, other->secure_key_);
    std::swap(channel_, other->channel_);
    std::swap(version_, other->version_);
    std::swap(phone_no_, other->phone_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LoginRequest::GetTypeName() const {
  return "ClientGate.LoginRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int BasicUserInfo::kUserIdFieldNumber;
const int BasicUserInfo::kNickFieldNumber;
const int BasicUserInfo::kAvatarFieldNumber;
const int BasicUserInfo::kGenderFieldNumber;
const int BasicUserInfo::kUserScoreFieldNumber;
const int BasicUserInfo::kExperienceFieldNumber;
#endif  // !_MSC_VER

BasicUserInfo::BasicUserInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BasicUserInfo::InitAsDefaultInstance() {
}

BasicUserInfo::BasicUserInfo(const BasicUserInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BasicUserInfo::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gender_ = 0;
  user_score_ = GOOGLE_LONGLONG(0);
  experience_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BasicUserInfo::~BasicUserInfo() {
  SharedDtor();
}

void BasicUserInfo::SharedDtor() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_;
  }
  if (avatar_ != &::google::protobuf::internal::kEmptyString) {
    delete avatar_;
  }
  if (this != default_instance_) {
  }
}

void BasicUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BasicUserInfo& BasicUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientGate_2eproto();  return *default_instance_;
}

BasicUserInfo* BasicUserInfo::default_instance_ = NULL;

BasicUserInfo* BasicUserInfo::New() const {
  return new BasicUserInfo;
}

void BasicUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
    if (has_nick()) {
      if (nick_ != &::google::protobuf::internal::kEmptyString) {
        nick_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::kEmptyString) {
        avatar_->clear();
      }
    }
    gender_ = 0;
    user_score_ = GOOGLE_LONGLONG(0);
    experience_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BasicUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nick;
        break;
      }
      
      // required string nick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_avatar;
        break;
      }
      
      // required string avatar = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gender;
        break;
      }
      
      // required .ClientGate.EnumGender gender = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ClientGate::EnumGender_IsValid(value)) {
            set_gender(static_cast< ClientGate::EnumGender >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_user_score;
        break;
      }
      
      // required int64 user_score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_score_)));
          set_has_user_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_experience;
        break;
      }
      
      // required uint64 experience = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_experience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &experience_)));
          set_has_experience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BasicUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_id(), output);
  }
  
  // required string nick = 2;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nick(), output);
  }
  
  // required string avatar = 3;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->avatar(), output);
  }
  
  // required .ClientGate.EnumGender gender = 4;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->gender(), output);
  }
  
  // required int64 user_score = 5;
  if (has_user_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->user_score(), output);
  }
  
  // required uint64 experience = 6;
  if (has_experience()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->experience(), output);
  }
  
}

int BasicUserInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }
    
    // required string nick = 2;
    if (has_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick());
    }
    
    // required string avatar = 3;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }
    
    // required .ClientGate.EnumGender gender = 4;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }
    
    // required int64 user_score = 5;
    if (has_user_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_score());
    }
    
    // required uint64 experience = 6;
    if (has_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->experience());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BasicUserInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BasicUserInfo*>(&from));
}

void BasicUserInfo::MergeFrom(const BasicUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_nick()) {
      set_nick(from.nick());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_user_score()) {
      set_user_score(from.user_score());
    }
    if (from.has_experience()) {
      set_experience(from.experience());
    }
  }
}

void BasicUserInfo::CopyFrom(const BasicUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void BasicUserInfo::Swap(BasicUserInfo* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(nick_, other->nick_);
    std::swap(avatar_, other->avatar_);
    std::swap(gender_, other->gender_);
    std::swap(user_score_, other->user_score_);
    std::swap(experience_, other->experience_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BasicUserInfo::GetTypeName() const {
  return "ClientGate.BasicUserInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int LoginResponse::kResultFieldNumber;
const int LoginResponse::kBasicUserInfoFieldNumber;
const int LoginResponse::kUpdateUrlFieldNumber;
const int LoginResponse::kIosUpdateUrlFieldNumber;
const int LoginResponse::kLatestVersionFieldNumber;
const int LoginResponse::kUpdateInfoFieldNumber;
#endif  // !_MSC_VER

LoginResponse::LoginResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LoginResponse::InitAsDefaultInstance() {
  basic_user_info_ = const_cast< ::ClientGate::BasicUserInfo*>(&::ClientGate::BasicUserInfo::default_instance());
}

LoginResponse::LoginResponse(const LoginResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LoginResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  basic_user_info_ = NULL;
  update_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ios_update_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  latest_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  update_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginResponse::~LoginResponse() {
  SharedDtor();
}

void LoginResponse::SharedDtor() {
  if (update_url_ != &::google::protobuf::internal::kEmptyString) {
    delete update_url_;
  }
  if (ios_update_url_ != &::google::protobuf::internal::kEmptyString) {
    delete ios_update_url_;
  }
  if (latest_version_ != &::google::protobuf::internal::kEmptyString) {
    delete latest_version_;
  }
  if (update_info_ != &::google::protobuf::internal::kEmptyString) {
    delete update_info_;
  }
  if (this != default_instance_) {
    delete basic_user_info_;
  }
}

void LoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LoginResponse& LoginResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientGate_2eproto();  return *default_instance_;
}

LoginResponse* LoginResponse::default_instance_ = NULL;

LoginResponse* LoginResponse::New() const {
  return new LoginResponse;
}

void LoginResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_basic_user_info()) {
      if (basic_user_info_ != NULL) basic_user_info_->::ClientGate::BasicUserInfo::Clear();
    }
    if (has_update_url()) {
      if (update_url_ != &::google::protobuf::internal::kEmptyString) {
        update_url_->clear();
      }
    }
    if (has_ios_update_url()) {
      if (ios_update_url_ != &::google::protobuf::internal::kEmptyString) {
        ios_update_url_->clear();
      }
    }
    if (has_latest_version()) {
      if (latest_version_ != &::google::protobuf::internal::kEmptyString) {
        latest_version_->clear();
      }
    }
    if (has_update_info()) {
      if (update_info_ != &::google::protobuf::internal::kEmptyString) {
        update_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ClientGate.EnumResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (ClientGate::EnumResult_IsValid(value)) {
            set_result(static_cast< ClientGate::EnumResult >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_basic_user_info;
        break;
      }
      
      // required .ClientGate.BasicUserInfo basic_user_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_basic_user_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basic_user_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_update_url;
        break;
      }
      
      // optional string update_url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_update_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ios_update_url;
        break;
      }
      
      // optional string ios_update_url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ios_update_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ios_update_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_latest_version;
        break;
      }
      
      // optional string latest_version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_latest_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_latest_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_update_info;
        break;
      }
      
      // optional string update_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_update_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ClientGate.EnumResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }
  
  // required .ClientGate.BasicUserInfo basic_user_info = 2;
  if (has_basic_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->basic_user_info(), output);
  }
  
  // optional string update_url = 3;
  if (has_update_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->update_url(), output);
  }
  
  // optional string ios_update_url = 4;
  if (has_ios_update_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ios_update_url(), output);
  }
  
  // optional string latest_version = 5;
  if (has_latest_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->latest_version(), output);
  }
  
  // optional string update_info = 6;
  if (has_update_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->update_info(), output);
  }
  
}

int LoginResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ClientGate.EnumResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }
    
    // required .ClientGate.BasicUserInfo basic_user_info = 2;
    if (has_basic_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basic_user_info());
    }
    
    // optional string update_url = 3;
    if (has_update_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->update_url());
    }
    
    // optional string ios_update_url = 4;
    if (has_ios_update_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ios_update_url());
    }
    
    // optional string latest_version = 5;
    if (has_latest_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->latest_version());
    }
    
    // optional string update_info = 6;
    if (has_update_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->update_info());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LoginResponse*>(&from));
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_basic_user_info()) {
      mutable_basic_user_info()->::ClientGate::BasicUserInfo::MergeFrom(from.basic_user_info());
    }
    if (from.has_update_url()) {
      set_update_url(from.update_url());
    }
    if (from.has_ios_update_url()) {
      set_ios_update_url(from.ios_update_url());
    }
    if (from.has_latest_version()) {
      set_latest_version(from.latest_version());
    }
    if (from.has_update_info()) {
      set_update_info(from.update_info());
    }
  }
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_basic_user_info()) {
    if (!this->basic_user_info().IsInitialized()) return false;
  }
  return true;
}

void LoginResponse::Swap(LoginResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(basic_user_info_, other->basic_user_info_);
    std::swap(update_url_, other->update_url_);
    std::swap(ios_update_url_, other->ios_update_url_);
    std::swap(latest_version_, other->latest_version_);
    std::swap(update_info_, other->update_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LoginResponse::GetTypeName() const {
  return "ClientGate.LoginResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ClientGate

// @@protoc_insertion_point(global_scope)
